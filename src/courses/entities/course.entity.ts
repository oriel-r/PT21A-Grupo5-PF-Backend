import { ApiProperty } from '@nestjs/swagger';
import { Category } from 'src/categories/entities/category.entity';
import { Level } from 'src/enums/level.enum';
import { Specialization } from 'src/enums/specializations.enum';
import { Language } from 'src/language/entities/language.entity';
import { Lesson } from 'src/lessons/entities/lesson.entity';
import { User } from 'src/users/entities/user.entity';
import {
  Column,
  DeepPartial,
  Entity,
  JoinColumn,
  JoinTable,
  ManyToMany,
  ManyToOne,
  OneToMany,
  PrimaryGeneratedColumn,
} from 'typeorm';

import { v4 as uuid } from 'uuid';

@Entity()
export class Course {
  @ApiProperty({
    description: 'Autogenerated unique identifier for the course.',
    example: 'e6bfb1c7-8c3c-4d9f-a1ec-9f1bb9b2e252',
  })
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @ApiProperty({
    description: 'The title of the course.',
    example: 'English for IT',
  })
  @Column({ nullable: false })
  title: string;

  @ApiProperty({
    description: 'URL of the course image.',
    example: 'https://example.com/course-image.jpg',
  })
  @Column({ nullable: true })
  img_url: string;

  @ApiProperty({
    description: 'URL of the video introduction for the course.',
    example: 'https://example.com/intro-video.mp4',
  })
  @Column({ nullable: true, default: 'https://res.cloudinary.com/drhgd3e7s/video/upload/v1732670241/kitten_fbh01u.mp4' })
  video_url: string;

  @ApiProperty({
    description: 'The specialization of the course.',
    enum: Specialization,
    example: Specialization.IT,
  })
  @Column({ type: 'varchar'})
  specialization: string;

  @ApiProperty({
    description: 'The difficulty level of the course.',
    enum: Level,
    example: Level.ELEMENTARY,
  })
  @Column({ type: 'varchar' })
  level: string;

  @ApiProperty({
    description: 'A detailed description of the course.',
    example: 'This course covers the fundamentals of programming...',
  })
  @Column()
  general_description: string;

  @ApiProperty({
    description: 'A short description of the course.',
    example: 'Learn the basics of programming in just 30 days.',
  })
  @Column()
  brief_description: string;

  @ApiProperty({
    description: 'The total number of stars accumulated from ratings.',
    example: 120,
  })
  @Column({ default: 0 })
  totalStars: number;

  @ApiProperty({
    description: 'The total number of ratings received by the course.',
    example: 30,
  })
  @Column({ default: 0 })
  totalRatings: number;

  @ApiProperty({
    description: 'The average rating of the course.',
    example: 4.0,
  })
  @Column({ type: 'float', default: 0 })
  averageRating: number;

  @ApiProperty({
    description: 'The timestamp when the course was created.',
    example: '2024-11-12T10:00:00Z',
  })
  @Column({ type: 'datetime', default: Date.now() })
  createdAt: Date;

  @ApiProperty({
    description: 'The lessons associated with the course.',
    type: () => [Lesson],
  })
  @OneToMany(() => Lesson, (lesson) => lesson.course, {
    nullable: true,
    cascade: true,
  })
  lessons: Lesson[];

  @ApiProperty({
    description: 'The language associated with the course.',
    type: () => Language,
  })
  @ManyToOne(() => Language, (language) => language.courses, {eager: true})
  @JoinColumn()
  language: Language;

  @ApiProperty({
    name: 'Estado',
    description: 'Indicates if the course is active or not',
  })
  @Column({default:true})
  isActive: boolean;

  @ApiProperty({
    description: 'List of users who have rated the course.',
    type: () => [User],
  })
  @ManyToMany(() => User, { nullable: true })
  @JoinTable()
  ratedByUsers: User[];

  @ApiProperty({
    description: 'The teachers of the course.',
    type: () => [User],
  })
  @ManyToMany(() => User, (user) => user.coursesToTeach)
  @JoinTable()
  teachers: User[];

  @ApiProperty({
    description: 'The students enrolled in the course.',
    type: () => [User],
  })
  @ManyToMany(() => User, (user) => user.coursesToTake)
  @JoinTable()
  students: User[];

  @ApiProperty({
    description: 'The category of the course.',
    type: () => Category,
  })
  @ManyToOne(() => Category, (category) => category.courses)
  @JoinColumn()
  category: Category;

  constructor(partial: DeepPartial<Course>) {
    Object.assign(this, partial);
  }
}
